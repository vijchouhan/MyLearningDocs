Docker :- 

****************************************************TUTORIAL 1:-****************************************************
TUTORIAL 1:- Docker Tutorial for Beginners - Part 1 | What is Docker? | Docker Training | DevOps Tools | Edureka

Virtualization Vs Containerization

Virtualization:- Advantages - Runs multiple Os on Same Host Machine
							Reduce the cost of owenrship 
							Maintenance  and recovery become easy 
							
				Disadvantages:- Long Boot-Up Process(Approx 1 min )
							Hypevisors are not as efficient as Host OS
							Multiple VMS lead to unstable performance
							
Containerization :- Advantages over Virtualization
					Containers on same OS Kernel are ligher & Smaller
					Better Resource Utilization Compared to VMs
					Short Boot-Up Process (1/20th of second)
							
What is Docker ?

Docker is a Containerization platform which packages your application and all it's dependencies together in the form of Co ntainers so as to ensure that
	your application works seamlessly in any environment be it Development or Test or Production. 
	
Containerization:- It consists of an entinre runtime environment, an application, all it's dependencies, libraries, and other binaries, and configuration files
need to run it, bundled into one package. 

	
****************************************************TUTORIAL 2:-****************************************************
TUTORIAL 2:- What is Docker | Docker Tutorial for Beginners | Docker Container | DevOps Tools | Edureka

Docker Registry:- 
	Docker Registry is a storage component for docker images
	We can store the images in either Public/private repositories
	Docker Hub is docker's very own cloud repository..
	
	Why use Docker Registries ?
		Control where your images are being stored
		Integrate image storage with your in-house development workflow
		
Docker Images:- 
	Read Only template used to create Containers
	Built by docker Users
	Stored in docker hub or Your local registry
	
Docker Container:- Run time intance of docker image 
	Isolated Application Platform(Run time intance of docker image ),
	Contains Everything Needed to Run the Application
	Built from one or more Images(at the same time more that one container required to create one container)

Example:- 	
for Better understating of Docker image and Docker container, on my ubuntu box, I will pull a centos imange and run centos container in that.
1. Install docker in ubuntu Box
	1. Upodate package ($ sudo apt-get update )
	Before install docker need to install recomented component
	$ sudo apt-get install linux-image-exta-$(unage -r) linux-image-extra-virtual
	
	Done pre requisit, now instatll docker

2. $ sudo apt-get install docker-engine
Done docker installations...........

3. Start docker service 
	$ sudo service docker start
	
4. pull centos image from docker hub and run centos docker container
	$ sudo docker pull centos
		first look into local registry if doesn't find then go to the docker hub
5. run the docker container
	$	sudo docker run -it centos
	
	
Docker Compose:- Docker Composer makes it easier to configute and run applications made up of mutliple containers. (YAML file), run in sinle command
		Command:- dcker-compose up
		
		1. first need to install docker compose in ubuntu box, but before that need python pip
		$ sudo apt-get install python-pip
		
		2. Intall docker compose
		$ sudo pip install docker-compose
		
		$ mkdir wordpress
		$ cd wordpress
		
		edit compose file usint gedit
			$ sudo gedit docker-compose.yml;
			
		Copy downloaded yml content to above  created compose file docker-compose.yml
		
		file-------------docker-compose.yml--------start------
		
		wordpress:   // containr name defined here 
		image: 
			- workpress_db:mysql
		port:
			- 8080:80
		
		wordpress_db:
			image: mariadb
			environment:
			MYSQL_ROOT_PASSWORD: edureka
			
		phpmyadmin:
			image: conbinu/docker-phpmyadmin
			link:
				- wordpress_db:mysql
			port:
				- 8181:80
			environment:
				MYSQL_USERNAME: root
				MYSQL_ROOT_PASSWORD: edureka
				
		file--------------docker-compose.yml--------end-------
		
		
		3. Run the docker compose 
		$ sudo docker-compose up -d
		
		this command pull all three images and build containes
		
		working urls for thise application
		install wordpress:-	localhost:8080/
		localhost:8181/ - phpMyAdmin is used for basicall use to access my sql database
		
		
		
		
****************************************************TUTORIAL 3:-****************************************************
TUTORIAL 3:- Docker Installation | Install Docker | Docker Installation In CentOS | DevOps Tools | Edureka

same command run in above totorial to install docker

****************************************************TUTORIAL 4:-****************************************************
TUTORIAL 4:- Docker Commands With Examples | Docker Tutorial | DevOps Tutorial | Docker Training | Edureka

Environment : linux virtual machine is ubunto machine here, is hosted on my vm
Most Used Docker Commands
	docker --version
	docker --help --- list possible list of commands
	docker pull  --- pull to images from docker hub
	docker run  --- this command executes a docker images on your local repository and creates a runing container out of it. 
	docker build ---($ docker build -t myUbuntoImage . ) this command is used to compile the Dockerfile, for building custom Docker images based on the, . 'dot' indicate it is present in current directory 
	
	cat dokcer file command is used to see file in read mode
	gedit is used to edit the docker file
	
	docker login --- used to login docker hub --- want to share image with other , upload to image there have to login
	docker push  ($ docker push <dockerId>/<iamgeName>)--- once logged in dcker hub you can push in your images there by this command
		tag image with docker id
		$ doker tag mycusto vardhars/mysuimage 
		$ doker tag <imagename> <dockerid>/<imagename>
		
		
	docker ps  ---	($ docker ps) - docker process this command indenfy which are corrently exectuing or active
	
		($ docker ps -a )-- all active or inactice add containers list out
	docker images  --- see to available image on your local repository
	docker stop -- $ docker < container id> --- shut down container -- gental stop
	docker kill  --- force stop or kill
	
	docker rm  -- docker remove from repository, ($ docker rm <containeid>
	
	docker rmi ($ docker rmi <containeid>) docker remove image from repository
	
	docker exec ($ docker exec -it <containerid> bash) --- used to access an already running container and perform operations inside the container
			here -i option is for interactive mode access container 
			
			once run above command you r inside container
			let check out
			$ ls
			list all file here inside container, (example dependencies, src directory,  code, docker file, .js file .json file ets ), can make changes here
			(start container :- $ docker run --rm -p 4200:4200 --name 'MyDemoApp' demoapp1)
			
		exit the base use command ($ exit)
			
	docker commit ( $ docker commit <containerId> <name of new image> )--- used to basicall create a new image of an edited container on the local repo
	
	docker import ---- 	($ docker import /home/edureka/download/demo.tgz)	import to any tar file  into your local repository					
	
	docker export  --- ($ docker export --output=<name of tar file > <containerId>) is used to export a Docker image into a tar file in your local system
	
	docker comtainer  ($ docker containe logs/kill/rm/run/start)--- this command is used to manage your container
		$  docker containe  logs <container id> --- to see log for this container
		$ docker ps -a  --- see all containe info for both runing and stoped 
		$ docker containe rm <container id> --- remove container 
		$ docker containe kill ---- used to kill container any perticular
		$ docker containe run --- run container
		$ docker containe stop --- to stop container 
		
	docker compose   --- this commad is used to power multi-container applications where various services will be hosted inside differrent containers
		$ docker-compose build  -- used to build your yaml file (docker compose file) [yaml - yet another markup language]
		$ docker-compose up --- start to docker compose 
		
		to stop docker compose --- use command Ctrl+C
		
		
	docker swarm  --- this command is used to creates a network docker engines/hosts to execute containers in paraller(for scaling up & high availability)
	
	manager --- multipler worker
	
		$ docker swarm init -adverties-addr <id address of manager machine>
		$ docker swarm join  --- to join as worker Note: copy and paste ane execute in another machine 
		$ docker swarm join-token -- regenereate same token 
		$ docker swarm  leave -- want to leave docker swarm cluster if you are woker 
		$ docker swarm  leave -- force if your are swarm manager 
	
	docker service --- control existing docker service (Container/Compose/Swarm/ Others)
		$ docker service ls
		$ docker service logs --- find log
		$ docker service rm --- remove
		$ docker service stop -- want to stop any node 
		$ docker service ps  -- what container are executing 
		$ docker service scale  --- for scale 
		
		
	
****************************************************TUTORIAL 5:-****************************************************
TUTORIAL 5:- Dockerfile Tutorial with Example | Creating your First Dockerfile | Docker Training | Edureka


How to build docker image



		
		
		
			
		

		
		
	
	

	
	

 