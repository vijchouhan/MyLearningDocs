

JUNIT:- 

JUnit test framework provides the following important features −
fixtures
Test suites
Test runners
Junit classes

Fixtures
Fixtures is a fixed state of a set of objects used as a baseline for running tests. 
setUp() method, which runs before every test invocation.
tearDown() method, which runs after every test method.

Test Suites
A test suite bundles a few unit test cases and runs them together. In JUnit, both @RunWith and @Suite annotation are used to run the suite test.

//JUnit Suite Test
@RunWith(Suite.class)

@Suite.SuiteClasses({ 
   TestJunit1.class ,TestJunit2.class
})


Test Runners:- 
Test runner is used for executing the test cases. Here is an example that assumes the test class TestJunit already exists.

import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

public class TestRunner {
   public static void main(String[] args) {
      Result result = JUnitCore.runClasses(TestJunit.class);
		
      for (Failure failure : result.getFailures()) {
         System.out.println(failure.toString());
      }
		
      System.out.println(result.wasSuccessful());
   }
}


JUnit Classes: 

JUnit classes are important classes, used in writing and testing JUnits. Some of the important classes are −

Assert − Contains a set of assert methods.

TestCase − Contains a test case that defines the fixture to run multiple tests.

TestResult − Contains methods to collect the results of executing a test case.

----
JUnit JUnitCore.runClasses(TestJunit.class)
Result
Failure --- result.getFailures()
result.wasSuccessful()

@Test, JUnitCore, Result, Failure, wasSuccessful(), runClasses(), getFailures()
------------

most important package is junit.framework
important classes are Assert, TestSuite, TestCase, TestResult, 

=========================

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)

@Suite.SuiteClasses({
   TestJunit1.class,
   TestJunit2.class
})

public class JunitTestSuite {   
}  	

======================

JUnit 4 has introduced a new feature called parameterized tests. Parameterized tests allow a developer to run the same test over and over again using different values. There are five steps that you need to follow to create a parameterized test.

Annotate test class with @RunWith(Parameterized.class).

Create a public static method annotated with @Parameters that returns a Collection of Objects (as Array) as test data set.

Create a public constructor that takes in what is equivalent to one "row" of test data.

Create an instance variable for each "column" of test data.

Create your test case(s) using the instance variables as the source of the test data.

The test case will be invoked once for each row of data. Let us see parameterized tests in action.

=======================


