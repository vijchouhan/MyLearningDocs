---------------------------------------------GIT TUTORIAL by EDUREKA----------------------------------------------------
https://www.youtube.com/watch?v=xuB1Id2Wxak&list=PL9ooVrP1hQOGwtQOt8ZBlVjFlI-9Vr5hx
-------------------------------------------------------------------------------------------------

***************************************************************************************************
Tutorial 2: GIT and GITHUB Tutorial Videos
https://www.youtube.com/watch?v=41tsyReTloA&index=2&list=PL9ooVrP1hQOGwtQOt8ZBlVjFlI-9Vr5hx
***************************************************************************************************
Version control is the management of changes to documents, computer programs, large web sites and other collections of information.
These changes are usually termed as 'versions'

Version Control System Types:
1. Local Version Control System
2. Centralized Version Control System

	PC#1/Workstation --->> Working Copy ---> Server Repository
	PC#2/Workstation --->> Working Copy ---> Server Repository
	....
	
	
	Disadvantages:- 1. it is not locally available, that means always need to connect to network to perform any action
					2. here everything is centralized hence if server crashed result of all dato loss happen. this is main reason not to use centralized versions control system.
3. Distributed Version Version Control System
		it is not nessrelay relay on central server to stor all the version of project file, here every contributor has the local copy of clone of the main repository. that is means everyone maintain the local repository of their own and contain the file and matadata present in the main repository. in simple term everybody has the copy of remote repository. 
										commit/update		  pull/push				
		PC#1/Workstation --->> Working Copy ---> local Repository ---->> Remote/Server Repository
		PC#2/Workstation --->> Working Copy ---> local Repository ---->> Remote/Server Repository
		PC#3/Workstation --->> Working Copy ---> local Repository ---->> Remote/Server Repository
		....
		Advanges over Centralized version Control System ...
			Basically act of clone gives the main advantages. how is given below
			for push/pull operation you need n/w connection to access remote repository.
			all pperation apart from pull/push are very fast, because tools need to access  hardrive not the remote server
			don't neet internate connection always.
			
			commiting changes can be done locally without manipulating data on remote repository, if you want to make any changes you can take feebback from any developer, after change, get review of your changes. then you can push to remote repository.
			
			if any point of time certral servet gets crashed, then the lost data can be recovered  from any of the local repository.
			 
Git Features:- 
	Economical -- released under the gpl liences, open source,  free
	Non-Linear -- Supprts not linear development of software, record your current status of the project by creating tree graph from the index, three is not linear datastructure.
	Snapshots -- Records Changes made to a file rather than file itself. 
	Distributed --  Every user has his own copy of the repository data stored lacally. 
	Speed -- speed offered by git is lightening fast compared to other VCS's. 
	Robust -- Nearly every task in Git is undo-able
	Integrity -- No changes can be made without git recording it
	Branching -- Every collaborator's working directory is in itself is branch. 

	
WHat is GIT ?	
GIT:- git is an open source distributed Version control System which records changes made to the files laying emphasis on speed, data integriti nad distributed, non-linear workflows.

Git work flow:- 
	Remote repository - server wher all collaborator upload made changes to the file. 
	Local repository - user copy of remote repository 
	Woking Copy - user active director, modify, create few file in this area. can be compare with local repository. this is the are wher user makes changes.  
	Staging Area - This is the place where all modified files marked to be commited a place, basically before push to remote repository it is the place where you commit your changes. This is place between 'working copy' and 'local repository'
	
	Fetch command:- get all changes from remote repository to local repository but doesn't effect wour working copy. 
	
	staging area is a part of local repository... 
	
Diff  between pull and fetch:-

	https://www.git-tower.com/learn/git/faq/difference-between-git-fetch-git-pull
	https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch
	
	When you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in.  pull automatically merges the commits without letting you review them first. If you don’t closely manage your branches, you may run into frequent conflicts.

	When you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge.

---------------	
Parallel Development or non Linear:- 

	Branching:- Branchin is an integral part of any Version Control(VC) System. Unlike other VC's Git does not create a copy of existing files for new branch. It points to snapshot of the changes you have made in the system.
	
	Merging:- Merging integrates the changes made in differe nt branches into one single branch.
	
	Rebasing:- Used when changes made in one brach needs to be reflected in another branch. This is another kind of merging. 
		you have a new brach from master branch by branching. when you rebasing it insteed of creating similar commit which will have two parent commit, what rebasing does it places entire commit history of your branch on tif of master.
		benefits:- have much clear history
				   Used when changes made in one brach needs to be reflected in another branch.
---------------
Stashing:- 		Used when changes made in one branch needs to be reflected in another branch.
		Git Staging is the way of creating a check point for non commited changes, it saves all changes to a temporary location so that user can perform other task such as swirching branch, reverting etc. This changes can be reapplyed any where.
		
   
			local repository --	new branch for new feature -- merger back with master --- create remote repository 
		
							---rebasing and stashing --- final push local to remore repository... 
	
$ git log command to see all commit made
$ git checkout master command to switch to master branch 	
$ gedit command to edit the file
Ctrl+X to exit from edit mode

$ git diff to show the difference of the changes made in the file present in  working directory and local repository 

--------------------
stashing and rebasing operaton :- 

stashing:- 
creating new branch and named it feature2, -b is automatically create new branch and automatically change to head branch 

$git checkout -b feature2

	first swith to master then merge branch1 to it. command is below
$ git merge <branch1> 
---------------------

to deel with remote repository...

$git remote add origin <git url>

here origin is varaiable name 
------------
to stash the file before add or commit... use below command
$ git stash save 'feature2 changed'

To show the list of all stashed in this branch use below command
$git stash list

To apply this to on feature1 branch use below command, firt go to feature1 branch
$ git checkout feature1
$ git stash apply <stash Id>
$ git stash apply stash@{0}  ///press tab automatically stash id comes up
verify by seeing this file by below command
$ gedit fileName

Now commit this 

$ git commit -m "message"
------------------------------------------------
rebasing:- 

for that create new branch 

$ git checkout -b feature3 

$ gedit index.html  // open file and make some changes

$ git add index.html 
$ git commit -m "chagges done"

Now go to master branch... 

$ git checkout master 
make some changes here
$ gedit index.html
$ git add inded.html
$ git commit -m "message"

make some more changes here... repeat above command

command to add and commit in one go use below command
$ git commit -a -m 'messame ' // -a is for add and -m for messame

Not to rebash go to the feature3 again and rebase with the master where only one file index.html is changed but in master two file have changed including index.html 
$ git checkout freature3
$ git rebase master 

// to verify this go to feature3 and check that all changes done with master is applied on feature3 or not ....

===============================
:	GIT COMMANDS	:

sudo apt-get install git  ---------- used to install git 
git config --global user.name "username"  --- configure user name and password
git rm <filename> ---- remove any file 
git add <filename>
git status
git commit
git log --- see all commits
git diff --- 
git rm -f <filename> ---- remove file from staging area
git show <tag-name> --- use the tag you r using
git rm --cached <filename> --- remove from cached area
git tag --- is creat tag
git push origin master ---->> push your local to repository to remote repository 
git pull origin ----->> pull data from remote repository to local repository
git add remore origin <remote link> ----- to link local repository to remote repository 
git fetch origin --------- fetch from remote  to local repository 
git push origin --tags ======== push tags to remote repository

BRANCHING COMMAND:

git branch <branchname> ==== create branch
git checkout <branchname> ==== switch to mentioned branch, checkout working head  
git merge <branchname>  === merge into this branch from metntioned branch
git branch --- all branch show
git branch -d <branchname> === delete branch 
git branch -D <branchname> === deleter branch from unstashed area 

STASHING COMMANDDS

git stash save 'messame'  ==== save the stash 
git stash list  ==== gives list of stash
git stash apply <stash id>  === for apply this percular stash on that perticular commit 
git stash pop ==== for apply mostly stashed and remove from stash list 
git stash drop <stash id> === delete from the stashlist 
git stash clear === clear the complete list of stash

************************************************************************************************************
Tutorial 6: Git Merge and Rebase | Git Merge vs Rebase | Which One to Choose? | Devops Training | Edureka
https://www.youtube.com/watch?v=tjVsGOGExh4&list=PL9ooVrP1hQOGwtQOt8ZBlVjFlI-9Vr5hx&index=6
************************************************************************************************************

			-:	GIT MERGE & REBASE	:- 
			
Scenariao :- supose one developer checkout master branch and pushed some changes on it
			ealier feature branch is created from master branch is little backward, bcz now the master is the ahead of that feature branch.

			Now solution is first merge master into feature or rebase feature with master.
			
Merge :- 
command;	
		git checkout feature // to head into feature branch
		git merge master
		 or one command helow
		git merger master feature // here feature is the name of branch  this is to merge master into feature
		
Rebase :- Rebasing is Re-write the project history by creating brand new commit for each commit in the original branch. benefits 		is you now get much clean history.
	it  iliminate the unneccessary merge commits required by the git merge. rebasing result in perfect linear project history. 
	git checkout feature // to head with feature branch then
	git rebase master // now master gets merge into feature branch
	
	Rebase - Rebaing the feature branch onto Master 
	
	Rebasing move the entire feature branch to begen on top of master branch effectively in co-operating all of the new commits in the master
------------------------------------------------------------------------------------------------	

----------------:Interactive Rebasing :---------
	It gives the opportunities to alter the commit as their moves to the new branch. This is even more powerful than the automate rebase, it offer complete control over the branch commit history.  
	Basically it is used to clean up the messay history before merging a feature branch into master. 

Rebasing - When NOT to do it.
	The basic rule of rebasing is never use it on buplic branch. 

-----------------------------git workflow for rebase-----------------------------------	
------:	Locl Clean-up:--------
git checkout feature
git rebase -i HEAD~3
----------------------------------------------------------------

------:	UpStream Changes:-------
------------------------------------------------------------------------------

Tutorial 5 :- Git Merge Conflict Tutorial | Resolving Merge Conflicts In Git | DevOps Training | Edureka

Creating repositories
	$ git init  // to create local repository

Making  changes 
	$ git status
	$ git add
	$ git commit
	
Parallel Development
	$ git branch
	$ git merge
	$ git rebase
	
Syncing repositories
	$ git add origin  // to add on origin means remote repository
	$ git push
	$ git pull
	
===================
initialize git
$ git init // .git folder gets created 
add origin 
$ git add origin  <link of remote/central repository>
pull all file 
$ git pull origin master 

after some changes:- 
	git add
	git commit
	git push origin master
	
both developer after some changes want to push at same master branch ... then at first developer gets allowed but second got rejected due to conflict
Solution :- insteed to pull directly,  use rebase command what it does it will always has the initial commit that will come from central repository. it will just add my commit on top of that workflow or my working tree that shows all my comments. 
	
	$ git pull --rebase origin master
******************command promt messame******************satrt
CONFLICT : merge conflict in edureka.txt
Patch failed at 00001 alice
The copy of the patch that failded is found in .git/rebase-apply/patch

When you have resolveed this problem, run "git rebase --continue"

if you prefer to skip thi patch. run "git rebase --skip" insteed.

to check out the original branch add stop rebasing. run "git rebase --abort"
******************command promt messame******************end
 in order to solve this conflict 
	$ git mergetool 
	Now open in editor which show original, change 1 and change 2 all ...
	save file
	:wq 
	
	$ git rebase --continue
			.. applyed last changes while you done when you resolving the conflict 
	$ git push origin master
	
.............NOW CONFLICT RESOLVER......for centralized branch that is master........

NOW three developer working of same branch suppose 'feature' 

Here developer who pushed first can initial new pull request for other developer 

Commands: 
this is for first developer........
	$ git branch feature1
	$ git checkout feature1
	$ vim additional.txt // add file 
	$ git add additional.txt
	$ git commit -m "message "
	$ git push origin feature1
	
Then request for pull request for other one to gets updated.

this is for second developer........	
