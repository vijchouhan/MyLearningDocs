https://www.youtube.com/watch?v=41tsyReTloA&list=PL9ooVrP1hQOGwtQOt8ZBlVjFlI-9Vr5hx&index=2

Version control is the management of changes to documents, computer programs, large web sites and other collections of information.
These changes are usually termed as 'versions'

Version Control System Types:
1. Local Version Control System
2. Centralized Version Control System

	PC#1/Workstation --->> Working Copy ---> Server Repository
	PC#2/Workstation --->> Working Copy ---> Server Repository
	....
	
	
	Disadvantages:- 1. it is not locally available, that means always need to connect to network to perform any action
					2. here everything is centralized hence if server crashed result of all dato loss happen. this is main reason not to use centralized versions control system.
3. Distributed Version Version Control System
		it is not nessrelay relay on central server to stor all the version of project file, here every contributor has the local copy of clone of the main repository. that is means everyone maintain the local repository of their own and contain the file and matadata present in the main repository. in simple term everybody has the copy of remote repository. 
										commit/update		  pull/push				
		PC#1/Workstation --->> Working Copy ---> local Repository ---->> Remote/Server Repository
		PC#2/Workstation --->> Working Copy ---> local Repository ---->> Remote/Server Repository
		PC#3/Workstation --->> Working Copy ---> local Repository ---->> Remote/Server Repository
		....
		Advanges over Centralized version Control System ...
			Basically act of clone gives the main advantages. how is given below
			for push/pull operation you need n/w connection to access remote repository.
			all pperation apart from pull/push are very fast, because tools need to access  hardrive not the remote server
			don't neet internate connection always.
			
			commiting changes can be done locally without manipulating data on remote repository, if you want to make any changes you can take feebback from any developer, after change, get review of your changes. then you can push to remote repository.
			
			if any point of time certral servet gets crashed, then the lost data can be recovered  from any of the local repository.
			 
Git Features:- 
	Economical -- released under the gpl liences, open source,  free
	Non-Linear -- Supprts not linear development of software, record your current status of the project by creating tree graph from the index, three is not linear datastructure.
	Snapshots -- Records Changes made to a file rather than file itself. 
	Distributed --  Every user has his own copy of the repository data stored lacally. 
	Speed -- speed offered by git is lightening fast compared to other VCS's. 
	Robust -- Nearly every task in Git is undo-able
	Integrity -- No changes can be made without git recording it
	Branching -- Every collaborator's working directory is in itself is branch. 

	
WHat is GIT ?	
GIT:- git is an open source distributed Version control System which records changes made to the files laying emphasis on speed, data integriti nad distributed, non-linear workflows.

Git work flow:- 
	Remote repository - server wher all collaborator upload made changes to the file. 
	Local repository - user copy of remote repository 
	Woking Copy - user active director, modify, create few file in this area. can be compare with local repository. this is the are wher user makes changes.  
	Staging Area - This is the place where all modified files marked to be commited a place, basically before push to remote repository it is the place where you commit your changes. This is place between 'working copy' and 'local repository'
	
	Fetch command:- get all changes from remote repository to local repository but doesn't effect wour working copy. 
	
	staging area is a part of local repository... 
	
Diff  between pull and fetch:-

	https://www.git-tower.com/learn/git/faq/difference-between-git-fetch-git-pull
	https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch
	
	When you use pull, Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled commits into the branch you are currently working in.  pull automatically merges the commits without letting you review them first. If you don’t closely manage your branches, you may run into frequent conflicts.

	When you fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repository. However, it does not merge them with your current branch. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. To integrate the commits into your master branch, you use merge.

---------------	
Parallel Development or non Linear:- 

	Branching:- Branchin is an integral part of any Version Control(VC) System. Unlike other VC's Git does not create a copy of existing files for new branch. It points to snapshot of the changes you have made in the system.
	
	Merging:- Merging integrates the changes made in differe nt branches into one single branch.
	
	Rebasing:- Used when changes made in one brach needs to be reflected in another branch. This is another kind of merging. 
		you have a new brach from master branch by branching. when you rebasing it insteed of creating similar commit which will have two parent commit, what rebasing does it places entire commit history of your branch on tif of master.
		benefits:- have much clear history
				   Used when changes made in one brach needs to be reflected in another branch.
---------------
Stashing:- 		Used when changes made in one branch needs to be reflected in another branch.
		Git Staging is the way of creating a check point for non commited changes, it saves all changes to a temporary location so that user can perform other task such as swirching branch, reverting etc. This changes can be reapplyed any where.
		
   
			local repository --	new branch for new feature -- merger back with master --- create remote repository 
		
							---rebasing and stashing --- final push local to remore repository... 
	
$ git log command to see all commit made
$ git checkout master command to switch to master branch 	
$ gedit command to edit the file
Ctrl+X to exit from edit mode

$ git diff to show the difference of the changes made 

--------------------
stashing and rebasing operaton :- 

creating new branch and named it feature2, -b is automatically create new branch and automatically change to head branch 

$git checkout -b feature2




	first swith to master then merge branch1 to it. command is below
$ git merge <branch1> 
---------------------

to deel with remote repository...

$git remote add origin <git url>

here origin is varaiable name 
