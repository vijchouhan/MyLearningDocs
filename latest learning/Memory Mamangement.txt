-----: MEMORY MANAGEMENT :----

Memory devided into two part- 

1. 	Heap Memory :- 
		store class objects, JRE classeds, GC runs on heap memory only to free some memory by destroying some objects with do's have any references.
		
		Objects are getting shifes to Eden to surviour with the help of Minor GC garbage collector
		
		Yong Generation(further devided into Eden, Survior S0, Survior S1... ) -->> Minor GC carbage collector
		
		Whenever new object gets created it store in Eden memory .. 
		
		Old Genetaration
			Major GC garbage collector, it take comparitively longer time for Minor GC
			time out errors			
			
		Memory Pool :- this is part of heap memory
			used to store immutable objects, like String class, string pool, 
			this will be defined at run time by JVM memory management
		
		
		
	
2. 	Java Stack Memory:- 
		used to execution of the thread
		it contains method specific values
		all local variables are stored inside stack memory
		inside the method havinvg object references which are refering some object present in heap memory also stored here
		Test t1 = new Test();
		t1 is stored here but actual object (new Test() ) will be stored in heap memory Eden area
		store value on the basic of LIFO (last in first out)

		stack memory size is less that heap memory

		Permanent generation is part of Stack memory
		
	Permanent Generation (further divided into 'Method Area')
		application metadata which is defined by JVM to describe the class and method will be stored
		Metadata of classes/methods
		Not part of Heap memory
		Generated at run time
		
		Method Area :- onother area inside the  permanent generation  
			class structure
			static variables
			constants
			
			Run Time Constant Pool: part of permanent generation
				inside the method area we have run time constant pool
				generated at run time, used to store static and constants variables
		
=========================================================================================

						----: JVM ARCHITECTURE :----
						
----------------------------------------
The mail function of JVM is to load and execute your application, 
Load and execute 
	create Test.java
	javac Test.java
	java Test  --->> JVM Instance (at the time you execute the java class, basically you are creating a JVM instance)

															    (bytecode)		(native method call) 
		.class file or .class files of java api -->> class loader -->> execution engine <--> Host Operation System

Component 1.	Class loader subsystem,
		
Component 2.	Runtime data areas
				(method area, 	Heap, Java Stacks,	PC Registers, 	Native Method Stacks)
			
Component 3. 	Execution Engine

					Native Method Interface(JNI)
						[it connect to execution enging and class loader through runtime data area]
						[it further connect to native method interface]

							Native method libraries(.dll, .so etc)

-----------------------------------------------------------
Class loading subsystem,

LOAD
LINK
INITIALIZE 

LOAD:- 

	bootstrap class loader - rt.jar
	extention class loader - jre/lib/ext
	appliation class loader - class path, -cp command
	
LINK:- Verify :- valid java byte code verification
		Prepare:- is the place memory allocated for class level variable not for intance variable, default value allocation
			Resolve:- is the place where all symbolic references inside the current class are resolved

INITIALIZE:-	this is the phase where static initializer of the class is run example static block inside class	
				whatever values are set is getting set here in this phase
 
------
Class Loader Subsystem:- this consist of following parts
	---Run-time Data Areas--- Memory of jvm, it again having 5 data area defined as below
		1.	Method Area, :- it the are where meta data of class stored, like static variable, byte code, constant poops
				Method area called Perm Gen Space is called. by default 64 MB allowcated. (-XX:MaxPermSize). Since java 8 there is Metaspace, moved to perm gen into separate memory in the navite os. no limit in java 8. grows as automatically. can be limited as well. 
		2.	Heap,(-Xms, -Xmx) :- is the plcace where object data stored. intance variables, any objects. by default it is 1/4th of physical memory.
		
		3. PC Registers:- Program counter register. It contains program conters, which is the pointer to next instrunction to be executed per thread.
			Suppose you are runing three threads here T1, T2, T3.. so there will be program counter created for T1 pointing to the next instrunction for thread T1, and there will be program counter created for T2 pointing to the next instrunction for thread T2, and so on.... 
		
		4. Java Stacks:- contains stack frame coresponnding to the current method execution per thread. suppose we have a thread t1 having three method execution, have stack with respect to each method, then they are pushing into the stack for execution. it will pe poped based on returning.
		Per thread java stacks are created. Suppose any one method in any thread stack calling any native method then 'Native Method stack' come into pictures.  (5. Native Method Stacks) for example you r loading dll and  runing something from dll from  java application. that time native method stack is created. that you r calling. (-Xss can be set...). Every stack with copersponed to thread are individual they not shared. that's why they are thread safe.
		
		5. Native Method Stacks :- refere above 4th point.
------

EXECUTION ENGINE:- below are it's componts
			Interpreter, - takes bytes code instrunction, looks on at, find out what native operation has to be done  and execute that native operation. that is done by using native method interface, which interfaces the native method libraries that are present in jvm(.dll, .so(unxi os) etc). under jre/bin folder lots of .dll file those are platform specific  
			
			JIT Compiler:- just in time Compiler, compile and keep,... suppose we have set of instruction gets executed all the time repeately., those will bot ne interpreted again and again, what happpen is JIT compiler on the fly compile set of instruction and keep the targer machine code ready for execution. there is no more interpreter involved here, its only machine code execution 
			
			Hotspot profiler: role of hotspot compoler keep eyes on byte code that are runing. it help JIT compiler  to compile frequently used instrunctions.
			
			GC:- responsible to clean unused objects. 
			
