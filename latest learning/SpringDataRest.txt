------------------------------------------:SPRING DATA :----------------------------------------
https://spring.io/projects/spring-data
------------------------------------------------------------------------------------------------


Spting Data:- 
	Spring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store.

	It makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database. The projects are developed by working together with many of the companies and developers that are behind these exciting technologies.

Features:- 	
	1)	Powerful repository and custom object-mapping abstractions
	2)	Dynamic query derivation from repository method names
	3)	Implementation domain base classes providing basic properties
	4)	Support for transparent auditing (created, last changed)
	5)	Possibility to integrate custom repository code
	6)	Easy Spring integration via JavaConfig and custom XML namespaces
	7)	Advanced integration with Spring MVC controllers
	8)	Experimental support for cross-store persistence

Main modules:- 
		1.	Spring Data Commons - Core Spring concepts underpinning every Spring Data module.

		2.	Spring Data JDBC - Spring Data repository support for JDBC.

		3.	Spring Data JDBC Ext - Support for database specific extensions to standard JDBC including support for Oracle RAC fast connection failover, AQ JMS support and support for using advanced data types.

		4.	Spring Data JPA - Spring Data repository support for JPA.

		5.	Spring Data KeyValue - Map based repositories and SPIs to easily build a Spring Data module for key-value stores.

		6.	Spring Data LDAP - Spring Data repository support for Spring LDAP.

		7.	Spring Data MongoDB - Spring based, object-document support and repositories for MongoDB.

		8.	Spring Data Redis - Easy configuration and access to Redis from Spring applications.

		9.	Spring Data REST - Exports Spring Data repositories as hypermedia-driven RESTful resources.

		10.	Spring Data for Apache Cassandra - Easy configuration and access to Apache Cassandra or large scale, highly available, data oriented Spring applications.

		11.	Spring Data for Apace Geode - Easy configuration and access to Apache Geode for highly consistent, low latency, data oriented Spring applications.

		12.	Spring Data for Apache Solr - Easy configuration and access to Apache Solr for your search oriented Spring applications.

		13.	Spring Data for Pivotal GemFire - Easy configuration and access to Pivotal GemFire for your highly consistent, low latency/high through-put, data oriented Spring applications.
		
----------------------------------------:SPRING DATA REST:-------------------------------------- 
		https://spring.io/projects/spring-data-rest
------------------------------------------------------------------------------------------------
		Spring Data REST is part of the umbrella Spring Data project and makes it easy to build hypermedia-driven REST web services on top of Spring Data repositories.

		Spring Data REST builds on top of Spring Data repositories, analyzes your application’s domain model and exposes hypermedia-driven HTTP resources for aggregates contained in the model.
		
		Features:-		
		1.	Exposes a discoverable REST API for your domain model using HAL as media type.
		2.	Exposes 'collection, item and association resources' representing your model.	[5 point, 5.2, 5.3]
		3.	Supports pagination via 'navigational links'.	[6 point]
		4.	Allows to dynamically filter collection resources.
		5.	Exposes dedicated 'search resources for query methods' defined in your repositories.	[5.6 point]
		6.	Allows to 'hook into the handling of REST requests' by handling Spring ApplicationEvents.	[11 point]
		7.	'Exposes metadata' about the model discovered as ALPS and JSON Schema.	[13 point]
		8.	Allows to define client specific representations through 'projections'.	[8 point]
		9.	Ships a customized variant of the 'HAL Browser' to leverage the exposed metadata. 	[15.1 point]
		10.	Currently supports JPA, MongoDB, Neo4j, Solr, Cassandra, Gemfire.
		11.	Allows 'advanced customizations' of the default resources exposed.		[16 point]
		
		please look into below link for further details as per mentioned point number. 

		
-----------------------:Spring Data REST Reference Guide:--------------------------------
		https://docs.spring.io/spring-data/rest/docs/current/reference/html/	
------------------------------------------------------------------------------------------------

Reference Documentation

	3. Introduction
	REST web services have become the number one means for application integration on the web. In its core, REST defines that a system that consists of resources with which clients interact. These resources are implemented in a hypermedia-driven way. Spring MVC and Spring WebFlux each offer a solid foundation to build theses kinds of services. However, implementing even the simplest tenet of REST web services for a multi-domain object system can be quite tedious and result in a lot of boilerplate code.

	Spring Data REST builds on top of the Spring Data repositories and automatically exports those as REST resources. It leverages hypermedia to let clients automatically find functionality exposed by the repositories and integrate these resources into related hypermedia-based functionality.

	4. Getting started
	Spring Data REST is itself a Spring MVC application and is designed in such a way that it should integrate with your existing Spring MVC applications with little effort. An existing (or future) layer of services can run alongside Spring Data REST with only minor additional work.
	
	4.1. Adding Spring Data REST to a Spring Boot Project
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
		
	4.3. Adding Spring Data REST to a Maven project
	To add Spring Data REST to a Maven-based project, add the spring-data-rest-webmvc artifact to your compile-time dependencies, as follows:
		<dependency>
		  <groupId>org.springframework.data</groupId>
		  <artifactId>spring-data-rest-webmvc</artifactId>
		  <version>3.1.2.RELEASE</version>
		</dependency>
		
	4.4. Configuring Spring Data REST
	To install Spring Data REST alongside your existing Spring MVC application, you need to include the appropriate MVC configuration. Spring Data REST configuration is defined in a class called RepositoryRestMvcConfiguration and you can import that class into your application’s configuration.

	This step is unnecessary if you use Spring Boot’s auto-configuration. Spring Boot automatically enables Spring Data REST when you include spring-boot-starter-data-rest and, in your list of dependencies, your app is flagged with either @SpringBootApplication or @EnableAutoConfiguration.
	To customize the configuration, register a RepositoryRestConfigurer (or extend RepositoryRestConfigurerAdapter) and implement or override the configure…-methods relevant to your use case.

	4.5. Basic Settings for Spring Data REST
		Setting the Repository Detection Strategy
		Changing the Base URI
		Changing Other Spring Data REST Properties
		
		4.5.1. Setting the Repository Detection Strategy:-
		Spring Data REST uses a RepositoryDetectionStrategy to determine whether a repository is exported as a REST resource. The RepositoryDiscoveryStrategies enumeration includes the following values:
			
			spring.data.rest.detection-strategy=annotated
			
			DEFAULT: Exposes all public repository interfaces but considers the exported flag of @(Repository)RestResource.
			ALL: Exposes all repositories independently of type visibility and annotations.
			ANNOTATION:	Only repositories annotated with @RestResource are exposed, unless their exported flag is set to false.
			VISIBILITY:	Only public repositories annotated are exposed.
			
		4.5.2. Changing the Base URI:- 	
		By default, Spring Data REST serves up REST resources at the root URI, '/'. There are multiple ways to change the base path.
		With Spring Boot 1.2 and later versions, you can do change the base URI by setting a single property in application.properties, as follows:
			spring.data.rest.basePath=/api
		With Spring Boot 1.1 or earlier, or if you are not using Spring Boot, you can do the following:

		Alternatively, you can register a custom implementation of RepositoryRestConfigurer as a Spring bean and make sure it gets picked up by component scanning, as follows:
		-----
		@Component
		public class CustomizedRestMvcConfiguration extends RepositoryRestConfigurerAdapter {

		  @Override
		  public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
			config.setBasePath("/api");
		  }
		}
		------
		
		4.5.3. Changing Other Spring Data REST Properties
		
		basePath:			the root URI for Spring Data REST
		defaultPageSize:	change the default for the number of items served in a single page
		maxPageSize:		change the maximum number of items in a single page
		pageParamName:		change the name of the query parameter for selecting pages
		limitParamName:		change the name of the query parameter for the number of items to show in a page
		sortParamName:		change the name of the query parameter for sorting
		defaultMediaType:	change the default media type to use when none is specified
		returnBodyOnCreate:	change whether a body should be returned when creating a new entity
		returnBodyOnUpdate:	change whether a body should be returned when updating an entity

	4.6. Starting the Application		
		At this point, you must also configure your key data store. Spring Data REST officially supports:
			Spring Data JPA
			Spring Data MongoDB
			Spring Data Neo4j
			Spring Data GemFire
			Spring Data Cassandra
			
NOTE : for furthe details refer 
		https://docs.spring.io/spring-data/rest/docs/current/reference/html/
		
		--------------------
		
5. Repository resources

5.1. Fundamentals
	The core functionality of Spring Data REST is to export resources for Spring Data repositories. Thus, the core artifact to look at and potentially customize the way the exporting works is the repository interface. Consider the following repository interface:

	public interface OrderRepository extends CrudRepository<Order, Long> { }
	For this repository, Spring Data REST exposes a collection resource at /orders. The path is derived from the uncapitalized, pluralized, simple class name of the domain class being managed. It also exposes an item resource for each of the items managed by the repository under the URI template /orders/{id}.

	By default the HTTP methods to interact with these resources map to the according methods of CrudRepository. Read more on that in the sections on collection resources and item resources.
	
	
	5.1.1. Repository methods exposure
	Which HTTP resources are exposed for a certain repository is mostly driven by the structure of the repository. In other words, the resource exposure will follow which methods you have exposed on the repository. If you extend CrudRepository you usually expose all methods required to expose all HTTP resources we can register by default. Each of the resources listed below will define which of the methods need to be present so that a particular HTTP method can be exposed for each of the resources. That means, that repositories that are not exposing those methods — either by not declaring them at all or explicitly using @RestResource(exported = false) — won’t expose those HTTP methods on those resources.

	For details on how to tweak the default method exposure or dedicated HTTP methods individually see

	5.1.2. Default Status Codes
	For the resources exposed, we use a set of default status codes:

	200 OK: For plain GET requests.

	201 Created: For POST and PUT requests that create new resources.

	204 No Content: For PUT, PATCH, and DELETE requests when the configuration is set to not return response bodies for resource updates (RepositoryRestConfiguration.returnBodyOnUpdate). If the configuration value is set to include responses for PUT, 200 OK is returned for updates, and 201 Created is returned for resource created through PUT.

	If the configuration values (RepositoryRestConfiguration.returnBodyOnUpdate and RepositoryRestConfiguration.returnBodyCreate) are explicitly set to null, the presence of the HTTP Accept header is used to determine the response code.
	
	