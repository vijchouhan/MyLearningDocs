Swagger:- 

dependency:- 

    <properties>
        <swagger.version>3.0.0-SNAPSHOT</swagger.version>
    </properties>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-spring-webmvc</artifactId>
            <version>${swagger.version}</version>
        </dependency>
    </dependencies>
	
	
==========================
	
	
package com.lease.extraction.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;

@Configuration
@EnableSwagger2WebMvc
public class SwaggerConfig {

  @Bean
  public Docket ruleApi() {
    return new Docket(DocumentationType.SWAGGER_2)
        .select()
        .apis(RequestHandlerSelectors.basePackage("com.lease.extraction.controller"))
        .paths(PathSelectors.any())
        .build();

  }

}

==========================

Spring Data Rest:- 

dependency:- 

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
        </dependency>
		
		having model class
		having it's reponsitory class
----- rest controller where spring data is used --------------	
package com.lease.extraction.controller;

import com.lease.extraction.model.OperationalManagerDashboard;
import com.lease.extraction.service.OMDashboardService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/om")
@Api(value = "Dashboard Controller", description = " Dashboard Controller")
public class OMDashboardController {

  private OMDashboardService dashService;

  public OMDashboardController(OMDashboardService dashService) {
    this.dashService = dashService;
  }

  @ApiOperation(value = "Get Dashboard detail for Operational Manager")
  @GetMapping("/dashboards")
  public ResponseEntity getDashboardDetail(
      @RequestParam(value = "userId", required = false) String userId,
      @RequestParam(value = "userRole", required = false) String userRole,
      @RequestParam(value = "timeScale", required = false, defaultValue = "Weekly") String timeScale) {
    try {
      OperationalManagerDashboard operationalManagers = dashService
          .getOperationalManagerDashboardDetail(userId, userRole, timeScale);
      return new ResponseEntity<>(operationalManagers, HttpStatus.OK);
    } catch (Exception e) {
      e.printStackTrace();
      return ResponseEntity.notFound().build();
    }

  }
}

=======================================

Mongo DB:- 

1.	dependency:

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
		
2.	having repository:-

package com.lease.extraction.repository;

import com.lease.extraction.model.doclist.File;
import java.util.Date;
import java.util.List;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.data.repository.query.Param;

public interface FileRepository extends MongoRepository<File, String> {

//vijay.............
  List<File> findAllByLastModifiedDateAfter(Date lastModifiedDate);

  List<File> findAllByLastModifiedDate(Date lastModifiedDate);

  List<File> findAllByLastModifiedDateBetween(Date startDate, Date endDate);

  List<File> findAllByReviewerOrQualityChecker(String reviewer, String qualityChecker);


}


3.	enable mongo reponsitory in application class

package com.lease.extraction;

import com.lease.extraction.config.AppSettings;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

@SpringBootApplication
@EnableMongoRepositories("com.lease.extraction.repository")
@EnableConfigurationProperties(AppSettings.class)
public class DashboardLeaseExtractionApplication {

  public static void main(String[] args) {
    SpringApplication.run(DashboardLeaseExtractionApplication.class, args);
  }
}
		
		

	
	